import json
from openai import OpenAI 
import streamlit as st 
from pydantic import BaseModel, Field
from typing import List
import random
import time
import math

# Set page configuration
st.set_page_config(page_title="Idiom Learning Tool", page_icon="üìö", layout="wide")

# Custom CSS to improve UI
st.markdown("""
    <style>
    .stApp {
        max-width: 800px;
        margin: 0 auto;
        font-family: Arial, sans-serif;
    }
    .stButton>button {
        width: 100%;
    }
    .stRadio>div {
        flex-direction: row;
    }
    </style>
    """, unsafe_allow_html=True)

client = OpenAI()

st.title('üìö Idiom Learning Tool')
st.markdown("---")

class FinalScenario(BaseModel):
    scenario: str
    idiom: str
    explanation: str = Field(description="explanation of why the idiom is appropriate or not appropriate. Has to include the specific pragmatic use of the idiom.")
    follow_up_conversation: List[str] = Field(description="")
    other_expressions: str = Field(description="other expressions that are similar to the idiom and can be used interchangeably.")

SCENARIO_SYSTEM_PROMPT = """
You are a scenario generator that creates realistic and diverse scenarios for users who are learning idioms. As an input, you will receive an idiom to be used in a scenario. Your task is to create a scenario where the idiom is used naturally and appropriately.
"""

SCENARIO_VALIDATOR_SYSTEM_PROMPT = """
You are a scenario validator that checks if a scenario is realistic and appropriate for users who are learning idioms. As an input, you will receive a scenario and an idiom. Your task is to check if the scenario contains the idiom in a natural and appropriate way. If the idiom is used correctly, return "CORRECT". If not, return "INCORRECT". Your response should only contain "CORRECT" or "INCORRECT".
"""

IDIOM_USING_SCENARIO_GENERATOR_SYSTEM_PROMPT = """
You are an [idiom using scenario generator] that revises the scenario generated by [scenario generator] to make it more natural and appropriate. When generating a scenario, you have to consider the pragmatic use of the idiom. For example, if the idiom is "kick the bucket", you cannot use it to describe the death of a grandmother or anyone who deserves respect. As an input, you will receive a scenario and an idiom. Your task is to revise the scenario to make it more natural and appropriate. Your response has to be in the following JSON format:
{
    "scenario": str, # revised scenario 
    "idiom": str, # idiom to be used in the scenario
    "explanation": str # explanation of why the idiom is appropriate
}
"""

NOT_IDIOM_USING_SCENARIO_GENERATOR_SYSTEM_PROMPT = """
You are an [not idiom using scenario generator] that revises the scenario generated by [scenario generator] to make it into a scenario that is not appropriate for the given idiom. When generating a scenario, you have to consider the pragmatic use of the idiom. For example, if the idiom is "kick the bucket", you cannot use it to describe the death of a grandmother or anyone who deserves respect. As an input, you will receive a scenario and an idiom. Your task is to revise the scenario to make it into a scenario that is not appropriate for the given idiom.

Example of a scenario that is not appropriate for the given idiom is the following:
"Situation: Friends grandmother passed away. Idiom: kick the bucket"

In the above scenario, the idiom "kick the bucket" is used to describe the death of the grandmother, which is not a natural and appropriate way of using the idiom. Kick the bucket is used to describe the death of a person in a very blunt and disrespectful way.

Your response has to be in the following JSON format:
{
    "scenario": str, # revised scenario
    "idiom": str, # idiom that is not appropriate but used in the scenario
    "explanation": str # explanation of why the idiom is not appropriate
}
"""

if 'scenario_generated' not in st.session_state:
    st.session_state.scenario_generated = False

if 'answer_submitted' not in st.session_state:
    st.session_state.answer_submitted = False

if 'start_time' not in st.session_state:
    st.session_state.start_time = None

def reset_state():
    st.session_state.scenario_generated = False
    st.session_state.answer_submitted = False
    st.session_state.start_time = None

def beta_prior(alpha, beta):
    """Calculates the Beta prior's probability."""
    return alpha / (alpha + beta)

def exponential_likelihood(lambda_param, time_taken):
    """Calculates the Exponential likelihood based on the response time."""
    return math.exp(-lambda_param * time_taken)

def compute_posterior(alpha, beta, lambda_param, time_taken):
    """Computes the posterior distribution with a Beta prior and Exponential likelihood."""
    confidence = beta_prior(alpha, beta)
    likelihood = exponential_likelihood(lambda_param, time_taken)
    posterior = confidence * likelihood
    return posterior

def user_confidence_score(time_taken):
    """Calculates the user's confidence score based on time taken."""
    alpha = 10  # Initial confidence
    beta = 1    # Initial uncertainty
    lambda_param = 0.1  # Exponential distribution's lambda parameter

    posterior_confidence = compute_posterior(alpha, beta, lambda_param, time_taken)

    max_confidence = beta_prior(alpha, beta)
    min_confidence = 0
    
    scaled_confidence = (posterior_confidence - min_confidence) / (max_confidence - min_confidence)
    confidence_score = scaled_confidence * 100

    return max(0, min(100, confidence_score))

with st.form(key='idiom_form'):
    idiom_used = st.text_input('Enter an idiom:', placeholder="Type an idiom here...")
    submit_button = st.form_submit_button(label='Generate Scenario')

if submit_button and idiom_used:
    reset_state()
    with st.spinner('Generating scenario...'):
        scenario = client.chat.completions.create(
        model='o1-preview',
        messages=[
            {"role": "user", "content": SCENARIO_SYSTEM_PROMPT, 'name': 'scenario_generator'},
            {"role": "user", "content": idiom_used, 'name': 'idiom_used'}
            ]
        ).choices[0].message.content
    
    with st.spinner('Validating scenario...'):
        result = client.chat.completions.create(
            model='gpt-4o-2024-08-06',
            messages=[{"role": "system", "content": SCENARIO_VALIDATOR_SYSTEM_PROMPT}, {"role": "user", "content": f"Scenario: {scenario}\n Idiom: {idiom_used}"}]
        ).choices[0].message.content
    
    if result == 'CORRECT':
        st.success('‚úÖ Correct usage!')
        
        with st.spinner('Generating problem...'):
            coin_flip = random.choice(['heads', 'tails'])
            st.markdown(f"### ü™ô Coin Flip: {coin_flip}")
            
            if coin_flip == 'heads':
                final_scenario = client.beta.chat.completions.parse(
                    model='gpt-4o-2024-08-06',
                    messages=[
                        {"role": "system", "content": IDIOM_USING_SCENARIO_GENERATOR_SYSTEM_PROMPT, 'name': 'idiom_using_scenario_generator'},
                        {"role": "user", "content": f"Scenario: {scenario}\n Idiom: {idiom_used}", 'name': 'scenario_and_idiom_made_by_scenario_generator'}
                    ],
                    response_format=FinalScenario,
                ).choices[0].message.content
            else:
                final_scenario = client.beta.chat.completions.parse(
                    model='gpt-4o-2024-08-06',
                    messages=[
                        {"role": "system", "content": NOT_IDIOM_USING_SCENARIO_GENERATOR_SYSTEM_PROMPT, 'name': 'not_idiom_using_scenario_generator'},
                        {"role": "user", "content": f"Scenario: {scenario}\n Idiom: {idiom_used}", 'name': 'scenario_and_idiom_made_by_scenario_generator'}
                    ],
                    response_format=FinalScenario
                ).choices[0].message.content
            
            final_scenario = json.loads(final_scenario)
            st.session_state.final_scenario = final_scenario
            st.session_state.coin_flip = coin_flip
            st.session_state.scenario_generated = True
    else:
        st.error('‚ùå Incorrect usage!')
        st.write("The generated scenario didn't use the idiom correctly. Please try another idiom.")

if st.session_state.scenario_generated and not st.session_state.answer_submitted:
    st.markdown("### üìñ Scenario:")
    st.info(st.session_state.final_scenario['scenario'])
    
    st.markdown("### ü§î Your Turn:")
    user_decision = st.radio(
        f"Does the idiom '{st.session_state.final_scenario['idiom']}' appropriately describe the scenario above?",
        ('Yes', 'No')
    )
    
    if st.session_state.start_time is None:
        st.session_state.start_time = time.time()
    
    if st.button('Submit Answer', key='submit_answer'):
        end_time = time.time()
        time_taken = end_time - st.session_state.start_time
        
        correct_usage = st.session_state.coin_flip == 'heads'
        user_correct = (user_decision == 'Yes') == correct_usage
        
        confidence_score = user_confidence_score(time_taken)
        
        if user_correct:
            st.success('üéâ Correct answer!')
        else:
            st.error('‚ùå Incorrect answer.')
        
        st.write(f"The idiom '{st.session_state.final_scenario['idiom']}' was {'appropriately' if correct_usage else 'inappropriately'} used in this scenario.")
        st.write(f"Time taken: {time_taken:.2f} seconds")
        st.write(f"Confidence score: {confidence_score:.2f}")
        
        with st.expander('Check out the explanation'):
            st.write(st.session_state.final_scenario['explanation'])
            st.write(f"Other expressions that can be used interchangeably: {st.session_state.final_scenario['other_expressions']}")
        st.session_state.answer_submitted = True

if st.session_state.answer_submitted:
    if st.button('Generate New Scenario'):
        reset_state()

if not st.session_state.scenario_generated:
    st.markdown("---")
    st.markdown("### üí° How to use this tool:")
    st.write("1. Enter an idiom in the text box above.")
    st.write("2. Click 'Generate Scenario' to create a scenario using the idiom.")
    st.write("3. Decide if the idiom is used appropriately in the generated scenario.")
    st.write("4. Submit your answer and learn from the feedback!")